name: Release & Publish

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "RELEASE" to confirm publishing to npm'
        required: true

# Add permissions for the GITHUB_TOKEN
permissions:
  contents: write
  packages: write
  id-token: write  # Required for npm provenance

jobs:
  check_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check if branch is main
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "Error: This workflow can only be run from the main branch."
            echo "Current branch: ${GITHUB_REF#refs/heads/}"
            exit 1
          else
            echo "Running on main branch, proceeding with release."
          fi

  check_permissions:
    needs: check_branch
    runs-on: ubuntu-latest
    steps:
      - name: Check if user has permission
        id: check
        env:
          RELEASE_AUTHORIZED_USERS: ${{ secrets.RELEASE_AUTHORIZED_USERS || vars.RELEASE_AUTHORIZED_USERS }}
        run: |
          # Check if the current user is authorized
          if [[ -z "$RELEASE_AUTHORIZED_USERS" ]]; then
            echo "Error: RELEASE_AUTHORIZED_USERS is not set."
            echo "Please set it as a repository secret or variable with a comma-separated list of usernames."
            # If the value is not set, throw an error
            exit 1
          fi

          # Example format for RELEASE_AUTHORIZED_USERS: "username1,username2,username3"
          if [[ $RELEASE_AUTHORIZED_USERS == *"${{ github.actor }}"* ]]; then
            echo "User ${{ github.actor }} is authorized to run the release workflow"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "User ${{ github.actor }} is not authorized to run the release workflow"
            echo "authorized=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  get_version_info:
    needs: check_permissions
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm == 'RELEASE' }}
    outputs:
      formatted_version: ${{ steps.package_version.outputs.formatted_version }}
      notes_file: ${{ steps.check_notes.outputs.notes_file }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version from package.json
        id: package_version
        run: |
          VERSION="v$(node -p "require('./package.json').version")"
          echo "formatted_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version $VERSION from package.json"

      - name: Check release notes file
        id: check_notes
        run: |
          if [ -f "releases/${{ steps.package_version.outputs.formatted_version }}.txt" ]; then
            echo "notes_file=releases/${{ steps.package_version.outputs.formatted_version }}.txt" >> $GITHUB_OUTPUT
            echo "NOTES_EXIST=true" >> $GITHUB_OUTPUT
          else
            echo "No release notes file found at releases/${{ steps.package_version.outputs.formatted_version }}.txt"
            echo "NOTES_EXIST=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  build:
    needs: get_version_info
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Check package
        run: npm run check

  publish_npm:
    needs: [build, get_version_info]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Publish to NPM
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create_release:
    needs: [publish_npm, get_version_info]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.get_version_info.outputs.formatted_version }}
          body_path: ${{ needs.get_version_info.outputs.notes_file }}
          tag_name: ${{ needs.get_version_info.outputs.formatted_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
