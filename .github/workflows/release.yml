name: Release & Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
      confirm:
        description: 'Type "RELEASE" to confirm publishing to npm'
        required: true

# Add permissions for the GITHUB_TOKEN
permissions:
  contents: write
  packages: write

jobs:
  check_permissions:
    runs-on: ubuntu-latest
    steps:
      - name: Check if user has permission
        id: check
        env:
          RELEASE_AUTHORIZED_USERS: ${{ secrets.RELEASE_AUTHORIZED_USERS }}
        run: |
          # Check if the current user is authorized
          if [[ -z "$RELEASE_AUTHORIZED_USERS" ]]; then
            echo "Error: RELEASE_AUTHORIZED_USERS secret is not set."
            # If the secret is not set, throw an error
            exit 1
          fi

          # Example format for RELEASE_AUTHORIZED_USERS secret: "username1,username2,username3"
          if [[ $RELEASE_AUTHORIZED_USERS == *"${{ github.actor }}"* ]]; then
            echo "User ${{ github.actor }} is authorized to run the release workflow"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "User ${{ github.actor }} is not authorized to run the release workflow"
            echo "authorized=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  build:
    needs: check_permissions
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm == 'RELEASE' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --force

      - name: Build package
        run: npm run build

      - name: Format version
        id: format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^v ]]; then
            VERSION="v$VERSION"
          fi
          echo "FORMATTED_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check release notes file
        id: check_notes
        run: |
          if [ -f "releases/${{ env.FORMATTED_VERSION }}.txt" ]; then
            echo "NOTES_FILE=releases/${{ env.FORMATTED_VERSION }}.txt" >> $GITHUB_ENV
            echo "NOTES_EXIST=true" >> $GITHUB_OUTPUT
          else
            echo "No release notes file found at releases/${{ env.FORMATTED_VERSION }}.txt"
            echo "NOTES_EXIST=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Validate package version
        run: |
          PACKAGE_VERSION="v$(node -p "require('./package.json').version")"
          if [ "$PACKAGE_VERSION" != "${{ env.FORMATTED_VERSION }}" ]; then
            echo "Error: Requested version (${{ env.FORMATTED_VERSION }}) does not match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi

  publish_npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --force

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create_release:
    needs: [build, publish_npm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set formatted version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^v ]]; then
            VERSION="v$VERSION"
          fi
          echo "FORMATTED_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set notes file path
        run: echo "NOTES_FILE=releases/${{ env.FORMATTED_VERSION }}.txt" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.FORMATTED_VERSION }}
          body_path: ${{ env.NOTES_FILE }}
          tag_name: ${{ env.FORMATTED_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
